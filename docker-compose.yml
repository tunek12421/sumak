version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: sumate-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME_IN_PRODUCTION}
      POSTGRES_DB: ${POSTGRES_DB:-sumate}
    # SECURITY: PostgreSQL port NOT exposed to internet
    # Only accessible from other containers in the same network
    # ports:
    #   - "5432:5432"  # NEVER expose this port in production!
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./backend/database/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sumate-network

  # Backend API (Go)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sumate-backend
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME_IN_PRODUCTION}
      DB_NAME: ${POSTGRES_DB:-sumate}
      PORT: 8080
      BASE_URL: ${BASE_URL:-http://localhost:8080}
      UPLOADS_DIR: /root/uploads
      ENV: ${ENV:-production}
    # SECURITY: Backend port should only be accessed through nginx reverse proxy
    # Only expose for development. In production, nginx handles all external traffic
    ports:
      - "8080:8080"
    volumes:
      - uploads_data:/root/uploads
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sumate-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sumate-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - sumate-network

  # Admin Backend API (Go)
  admin-backend:
    build:
      context: ./admin/backend
      dockerfile: Dockerfile
    container_name: sumate-admin-backend
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME_IN_PRODUCTION}
      DB_NAME: ${POSTGRES_DB:-sumate}
      PORT: 8081
      BASE_URL: ${BASE_URL:-http://localhost:8080}
      ADMIN_USER: ${ADMIN_USER:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-CHANGE_ADMIN_PASSWORD}
      ENV: ${ENV:-production}
    # SECURITY: Admin backend should only be accessed through nginx reverse proxy
    ports:
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sumate-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Frontend (Nginx)
  admin-frontend:
    build:
      context: ./admin/frontend
      dockerfile: Dockerfile
    container_name: sumate-admin-frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    depends_on:
      - admin-backend
    networks:
      - sumate-network

  # Landing Page (Nginx)
  landing:
    build:
      context: ./landing
      dockerfile: Dockerfile
    container_name: sumate-landing
    restart: unless-stopped
    ports:
      - "3002:80"
    networks:
      - sumate-network

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  sumate-network:
    driver: bridge
